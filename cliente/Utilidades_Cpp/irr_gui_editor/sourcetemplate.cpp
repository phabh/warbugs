/*
	Comment Header
	Source Generated by DracSoft Irrlicht GUI Designer
	http://www.dracsoft.com/
	support@dracsoft.com
*/

#include <irrlicht.h>

using namespace irr;
using namespace gui;
using namespace video;
using namespace scene;
using namespace core;
using namespace io;


//********************
//EVENT RECEIVER CLASS
//********************
class MyEventReceiver : public IEventReceiver
{
    public:
    	virtual bool OnEvent(SEvent event)
    	{
    		//GUI EVENT
			if (event.EventType == EET_GUI_EVENT)
    		{
    			s32 id = event.GUIEvent.Caller->getID();

    			switch(event.GUIEvent.EventType)
    			{
        			case EGET_BUTTON_CLICKED:
						if (id==101)
						{
							//handle button click here
						}
        				break;
    			}
			}

    		return false;
    	}
};


//******************
//IRRLICHT VARIABLES
//******************
IrrlichtDevice *mydevice;
IVideoDriver *mydriver;
ISceneManager *myscene;
IGUIEnvironment *mygui;


//****************
//GLOBAL FUNCTIONS
//****************
bool InitializeVideo()
{
	//INITIALIZE VIDEO DEVICE
	mydevice = irr::createDevice(EDT_OPENGL, dimension2d<s32>(640,480),32,false,true,false);
	if (mydevice==0) {       //OpenGL didn't work, try software
		mydevice = irr::createDevice(EDT_SOFTWARE, dimension2d<s32>(640,480),32,false,true,false);
		if (mydevice==0)       //Software didn't work, the computer blows so quit
			return false;
	}
	mydevice->setResizeAble(true);
	return true;
}

void RenderAll()
{
	mydriver->beginScene(true, true, SColor(255,155,155,155));
	myscene->drawAll();
	mygui->drawAll();
	mydriver->endScene();
}

<<CreateGUI>>

//*********************
//MAIN PROGRAM FUNCTION
//*********************
int main()
{
    //start video
    if (!InitializeVideo())
		return 1;

	//get video driver and scene manager
	mydriver = mydevice->getVideoDriver();
	myscene = mydevice->getSceneManager();
	mygui = mydevice->getGUIEnvironment();

	//declare event reciever
    MyEventReceiver receiver;
	mydevice->setEventReceiver(&receiver);

	//create the GUI
	CreateGUI();

	//start updating the screen
	while(mydevice->run())
	{
		RenderAll();
	}

	//do cleanup
	mydevice->drop();

	return 0;
}